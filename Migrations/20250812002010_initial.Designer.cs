// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ONT_3rdyear_Project.Data;

#nullable disable

namespace ONT_3rdyear_Project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812002010_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Admission", b =>
                {
                    b.Property<int>("AdmisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmisionID"));

                    b.Property<DateOnly>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DischargeDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("AdmisionID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BedID")
                        .IsUnique();

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.HasIndex("WardID");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AllergyId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d706dd5-8f3f-4a93-81bd-74177db899ea",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            FullName = "Dr. John Doe",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR@HOSPITAL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMq9sXCxqVjYw+SGQOpBIPQtO9NYMRwxUizHOiIX7wqgrhnHQrLDku540gvvc3KlFQ==",
                            PhoneNumberConfirmed = false,
                            RoleType = "Doctor",
                            TwoFactorEnabled = false,
                            UserName = "doctor@hospital.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8bd5f0c-b6eb-46a3-b588-53186268d1e2",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            FullName = "Nurse Thabo",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE@HOSPITAL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFff+V3f7FIhrIvBb9yHp91/EqyQFysikeP0Po+CkZV6Bm4lHziy8wPmhoBfrPUYiA==",
                            PhoneNumberConfirmed = false,
                            RoleType = "Nurse",
                            TwoFactorEnabled = false,
                            UserName = "nurse@hospital.com"
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"));

                    b.Property<string>("BedNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("BedId");

                    b.HasIndex("WardID");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = 1,
                            BedNo = "G1",
                            IsDeleted = false,
                            IsOccupied = false,
                            WardID = 1
                        },
                        new
                        {
                            BedId = 2,
                            BedNo = "G2",
                            IsDeleted = false,
                            IsOccupied = true,
                            WardID = 1
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Consumable", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumableId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("ConsumableId");

                    b.HasIndex("WardID");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.ConsumableOrder", b =>
                {
                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableOrderId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityApproved")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRequested")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsumableId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ConsumableOrders");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<int>("DeliveredBy")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveredByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("RecievedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RecievedByUserId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryID");

                    b.HasIndex("DeliveredByUserId");

                    b.HasIndex("OrderID");

                    b.HasIndex("RecievedByUserId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.DeliveryItem", b =>
                {
                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryItemID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityDelivered")
                        .HasColumnType("int");

                    b.HasKey("DeliveryID", "ConsumableID");

                    b.HasIndex("ConsumableID");

                    b.ToTable("DeliveryItems");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Discharge", b =>
                {
                    b.Property<int>("DischargeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DischargeID"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDischarged")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("DischargeID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientID");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.DoctorAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UnassignedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PatientID");

                    b.ToTable("DoctorAssignment");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.HospitalInfo", b =>
                {
                    b.Property<int>("HospitalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalInfoId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalInfoId");

                    b.ToTable("HospitalInfo");

                    b.HasData(
                        new
                        {
                            HospitalInfoId = 1,
                            Address = "123 Health Avenue, Cape Town, Western Cape, 8000",
                            Description = "Sunrise Medical Centre is a state-of-the-art healthcare facility offering comprehensive care, modern technology, and highly qualified staff.",
                            DirectorName = "Dr. Lindiwe Mokoena",
                            EmailAddress = "info@sunrisemedical.co.za",
                            LastUpdated = new DateTime(2025, 8, 12, 2, 20, 7, 617, DateTimeKind.Local).AddTicks(6738),
                            Name = "Sunrise Medical centre",
                            Phone = "+27 21 555 1234",
                            Website = "https://www.sunrisemedical.co.za"
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Instruction", b =>
                {
                    b.Property<int>("InstructionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionID"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TreatVisitID")
                        .HasColumnType("int");

                    b.Property<int?>("VisitID")
                        .HasColumnType("int");

                    b.HasKey("InstructionID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatVisitID");

                    b.HasIndex("VisitID");

                    b.ToTable("Instructions");

                    b.HasData(
                        new
                        {
                            InstructionID = 1,
                            ApplicationUserID = 1,
                            DateRecorded = new DateTime(2025, 10, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Instructions = "Monitor vitls every 4 hours",
                            NurseRequest = "Please advise on wound management.",
                            PatientID = 1,
                            VisitID = 1
                        },
                        new
                        {
                            InstructionID = 2,
                            ApplicationUserID = 2,
                            DateRecorded = new DateTime(2025, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Instructions = "Administer antibiotics as prescribed.",
                            NurseRequest = "Please advise on wound management.",
                            PatientID = 2,
                            TreatVisitID = 1,
                            VisitID = 2
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.MedicalHistory", b =>
                {
                    b.Property<int>("MedHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedHistoryID"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ChronicCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditonSeverity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastSurgicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecorderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MedHistoryID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.HasKey("MedicationId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            MedicationId = 1,
                            ExpiryDate = new DateOnly(2026, 1, 1),
                            IsDeleted = false,
                            Name = "Paracetamol",
                            Schedule = 1
                        },
                        new
                        {
                            MedicationId = 2,
                            ExpiryDate = new DateOnly(2025, 12, 1),
                            IsDeleted = false,
                            Name = "Insulin",
                            Schedule = 4
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Movement", b =>
                {
                    b.Property<int>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementID"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovementID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PatientID");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderedBy")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderedBy");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WardID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<bool>("Admitted")
                        .HasColumnType("bit");

                    b.Property<string>("ChronicIllness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientID");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientID = 1,
                            Admitted = false,
                            ChronicIllness = "Hypertension",
                            DateOfBirth = new DateOnly(2000, 1, 15),
                            FirstName = "Naledi",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Kgomo"
                        },
                        new
                        {
                            PatientID = 2,
                            Admitted = true,
                            ChronicIllness = "Diabetes",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            FirstName = "Tshepo",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Mabasa"
                        },
                        new
                        {
                            PatientID = 3,
                            Admitted = true,
                            ChronicIllness = "Herpertension",
                            DateOfBirth = new DateOnly(2003, 2, 28),
                            FirstName = "Thando",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Smith"
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PatientAllergy", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PatientMedicationScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdministeredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitID")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("VisitID");

                    b.ToTable("PatientMedicationScripts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministeredDate = new DateTime(2025, 7, 14, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            ApplicationUserID = 2,
                            Dosage = "2 tablets twice a day",
                            MedicationId = 1,
                            PatientId = 1,
                            VisitID = 1,
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            AdministeredDate = new DateTime(2025, 7, 14, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            ApplicationUserID = 2,
                            Dosage = "1 tablet daily after meal",
                            MedicationId = 2,
                            PatientId = 2,
                            VisitID = 2,
                            isActive = true
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyID"));

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PharmacyID");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PharmacyMedication", b =>
                {
                    b.Property<int>("PhamarcyMedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhamarcyMedId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("MedicationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhamarcyID")
                        .HasColumnType("int");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhamarcyMedId");

                    b.HasIndex("MedicationID");

                    b.HasIndex("PhamarcyID");

                    b.ToTable("PharmacyMedications");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PrescribeMedication", b =>
                {
                    b.Property<int>("PrescribedMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescribedMedicationId"));

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescribedMedicationId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescribeMedications");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateIssued")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PrescriptionForwarding", b =>
                {
                    b.Property<int>("ForwardingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForwardingID"));

                    b.Property<int?>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ForwardedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.HasKey("ForwardingID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("PrescriptionForwardings");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PrescriptionRejection", b =>
                {
                    b.Property<int>("RejectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectionID"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RejectionID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("PrescriptionRejections");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.StockTake", b =>
                {
                    b.Property<int>("StockTakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTakeID"));

                    b.Property<DateTime>("StockTakeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TakenBy")
                        .HasColumnType("int");

                    b.Property<int?>("TakenByUserId")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("StockTakeID");

                    b.HasIndex("TakenByUserId");

                    b.HasIndex("WardID");

                    b.ToTable("StockTakes");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.StockTakeItem", b =>
                {
                    b.Property<int>("StockTakeID")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableID")
                        .HasColumnType("int");

                    b.Property<int>("Discrepancy")
                        .HasColumnType("int");

                    b.Property<int>("QuantityCounted")
                        .HasColumnType("int");

                    b.Property<int>("SystemQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TakenItemID")
                        .HasColumnType("int");

                    b.HasKey("StockTakeID", "ConsumableID");

                    b.HasIndex("ConsumableID");

                    b.ToTable("StockTakeItems");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<DateOnly>("SuppliedDate")
                        .HasColumnType("date");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.SupplierItem", b =>
                {
                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("SupplierItemID")
                        .HasColumnType("int");

                    b.HasKey("SupplierID", "ConsumableID");

                    b.HasIndex("ConsumableID");

                    b.ToTable("SupplierItems");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.TreatVisit", b =>
                {
                    b.Property<int>("TreatVisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatVisitID"));

                    b.Property<int?>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatVisitID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientID");

                    b.ToTable("TreatVisits");

                    b.HasData(
                        new
                        {
                            TreatVisitID = 1,
                            ApplicationUserID = 1,
                            IsCompleted = false,
                            Notes = "Initial wound dressing and IV fluid administered.",
                            PatientID = 1,
                            VisitDate = new DateTime(2025, 9, 10, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TreatVisitID = 2,
                            ApplicationUserID = 2,
                            IsCompleted = true,
                            Notes = "Follow-up visit to monitor fever.",
                            PatientID = 2,
                            VisitDate = new DateTime(2025, 8, 11, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentID"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("TreatVisitID")
                        .HasColumnType("int");

                    b.Property<int?>("Treat_VisitID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitID")
                        .HasColumnType("int");

                    b.HasKey("TreatmentID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatVisitID");

                    b.HasIndex("VisitID");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            TreatmentID = 1,
                            ApplicationUserID = 2,
                            IsActive = true,
                            PatientID = 1,
                            TreatmentDate = new DateTime(2025, 8, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TreatmentType = "IV Drip setup",
                            VisitID = 1
                        },
                        new
                        {
                            TreatmentID = 2,
                            ApplicationUserID = 2,
                            IsActive = true,
                            PatientID = 2,
                            TreatmentDate = new DateTime(2025, 10, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TreatmentType = "Wound Dressing",
                            VisitID = 2
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.VisitSchedule", b =>
                {
                    b.Property<int>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitID"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NextVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientID");

                    b.ToTable("VisitSchedules");

                    b.HasData(
                        new
                        {
                            VisitID = 1,
                            ApplicationUserID = 1,
                            Feedback = "Initial checkup - stable condition.",
                            IsActive = true,
                            NextVisit = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientID = 1,
                            VisitDate = new DateTime(2025, 9, 10, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VisitID = 2,
                            ApplicationUserID = 1,
                            Feedback = "Follow-up visit required medication adjustment.",
                            IsActive = true,
                            NextVisit = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientID = 2,
                            VisitDate = new DateTime(2025, 9, 30, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Vital", b =>
                {
                    b.Property<int>("VitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalID"));

                    b.Property<int>("ApplicationUserID")
                        .HasColumnType("int");

                    b.Property<string>("BP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("PulseRate")
                        .HasColumnType("int");

                    b.Property<double>("SugarLevel")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<int?>("TreatVisitID")
                        .HasColumnType("int");

                    b.Property<int?>("VisitID")
                        .HasColumnType("int");

                    b.HasKey("VitalID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TreatVisitID");

                    b.HasIndex("VisitID");

                    b.ToTable("Vitals");

                    b.HasData(
                        new
                        {
                            VitalID = 1,
                            ApplicationUserID = 1,
                            BP = "120/80",
                            Date = new DateTime(2025, 7, 3, 9, 30, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            PatientID = 1,
                            PulseRate = 72,
                            SugarLevel = 5.5,
                            Temperature = 38.270000000000003
                        },
                        new
                        {
                            VitalID = 2,
                            ApplicationUserID = 2,
                            BP = "130/85",
                            Date = new DateTime(2025, 7, 3, 10, 30, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            PatientID = 2,
                            PulseRate = 60,
                            SugarLevel = 7.2000000000000002,
                            Temperature = 37.119999999999997
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            WardID = 1,
                            Capacity = 10,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "General Ward"
                        },
                        new
                        {
                            WardID = 2,
                            Capacity = 10,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ICU"
                        });
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.WardConsumable", b =>
                {
                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockID")
                        .HasColumnType("int");

                    b.HasKey("WardID", "ConsumableID");

                    b.HasIndex("ConsumableID");

                    b.ToTable("WardConsumables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Admission", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany("Admissions")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Bed", "Bed")
                        .WithOne("Admissions")
                        .HasForeignKey("ONT_3rdyear_Project.Models.Admission", "BedID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithOne("Admissions")
                        .HasForeignKey("ONT_3rdyear_Project.Models.Admission", "PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Ward", "Ward")
                        .WithMany("Admissions")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Bed", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Consumable", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Ward", "Ward")
                        .WithMany("Consumables")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.ConsumableOrder", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Consumable", "Consumable")
                        .WithMany("ConsumableOrders")
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Order", "Order")
                        .WithMany("ConsumableOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Delivery", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "DeliveredByUser")
                        .WithMany()
                        .HasForeignKey("DeliveredByUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "RecievedByUser")
                        .WithMany()
                        .HasForeignKey("RecievedByUserId");

                    b.Navigation("DeliveredByUser");

                    b.Navigation("Order");

                    b.Navigation("RecievedByUser");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.DeliveryItem", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Consumable", "Consumable")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("ConsumableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Delivery", "Delivery")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Discharge", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("Discharges")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("Discharges")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.DoctorAssignment", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("DoctorAssignments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Instruction", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("Instructions")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("Instructions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.TreatVisit", "TreatVisit")
                        .WithMany("Instructions")
                        .HasForeignKey("TreatVisitID");

                    b.HasOne("ONT_3rdyear_Project.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("Instructions")
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("TreatVisit");

                    b.Navigation("User");

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.MedicalHistory", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany("MedicalHistories")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Movement", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany("Movements")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("Movements")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Order", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("OrderedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PatientAllergy", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Allergy", "Allergy")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany("PatientAllergies")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PatientMedicationScript", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "AdministeredBy")
                        .WithMany("AdministraterMedications")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Medication", "Medication")
                        .WithMany("PatientMedicationScripts")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("PatientMedicationScripts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("ONT_3rdyear_Project.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("PatientMedicationScripts")
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AdministeredBy");

                    b.Navigation("Medication");

                    b.Navigation("Patient");

                    b.Navigation("Prescription");

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PharmacyMedication", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Medication", "medication")
                        .WithMany("PharmacyMedications")
                        .HasForeignKey("MedicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Pharmacy", "pharmacy")
                        .WithMany("PharmacyMedications")
                        .HasForeignKey("PhamarcyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("medication");

                    b.Navigation("pharmacy");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PrescribeMedication", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Medication", "Medication")
                        .WithMany("PrescribeMadications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Prescription", "Prescription")
                        .WithMany("Prescribed_Medication")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Prescription", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PrescriptionForwarding", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("ONT_3rdyear_Project.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionForwarding")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.PrescriptionRejection", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionRejection")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.StockTake", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "TakenByUser")
                        .WithMany()
                        .HasForeignKey("TakenByUserId");

                    b.HasOne("ONT_3rdyear_Project.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TakenByUser");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.StockTakeItem", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Consumable", "Consumable")
                        .WithMany("StockTakeItems")
                        .HasForeignKey("ConsumableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.StockTake", "StockTake")
                        .WithMany("StockTakes")
                        .HasForeignKey("StockTakeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("StockTake");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.SupplierItem", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Consumable", "Consumable")
                        .WithMany("SupplierItems")
                        .HasForeignKey("ConsumableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Supplier", "Supplier")
                        .WithMany("SupplierItems")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.TreatVisit", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("TreatVisits")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Treatment", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("Treatments")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("Treatments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.TreatVisit", "TreatVisit")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatVisitID");

                    b.HasOne("ONT_3rdyear_Project.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("Treatments")
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("TreatVisit");

                    b.Navigation("User");

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.VisitSchedule", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("VisitSchedules")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("VisitSchedules")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Vital", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", "User")
                        .WithMany("Vitals")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Patient", "Patient")
                        .WithMany("Vitals")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.TreatVisit", null)
                        .WithMany("Vitals")
                        .HasForeignKey("TreatVisitID");

                    b.HasOne("ONT_3rdyear_Project.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("Vitals")
                        .HasForeignKey("VisitID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("User");

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Ward", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.ApplicationUser", null)
                        .WithMany("Wards")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.WardConsumable", b =>
                {
                    b.HasOne("ONT_3rdyear_Project.Models.Consumable", "Consumable")
                        .WithMany("WardConsumables")
                        .HasForeignKey("ConsumableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ONT_3rdyear_Project.Models.Ward", "Ward")
                        .WithMany("WardConsumables")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Allergy", b =>
                {
                    b.Navigation("PatientAllergies");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.ApplicationUser", b =>
                {
                    b.Navigation("AdministraterMedications");

                    b.Navigation("Admissions");

                    b.Navigation("Discharges");

                    b.Navigation("Instructions");

                    b.Navigation("MedicalHistories");

                    b.Navigation("Movements");

                    b.Navigation("PatientAllergies");

                    b.Navigation("Prescriptions");

                    b.Navigation("TreatVisits");

                    b.Navigation("Treatments");

                    b.Navigation("VisitSchedules");

                    b.Navigation("Vitals");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Bed", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Consumable", b =>
                {
                    b.Navigation("ConsumableOrders");

                    b.Navigation("DeliveryItems");

                    b.Navigation("StockTakeItems");

                    b.Navigation("SupplierItems");

                    b.Navigation("WardConsumables");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Delivery", b =>
                {
                    b.Navigation("DeliveryItems");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Medication", b =>
                {
                    b.Navigation("PatientMedicationScripts");

                    b.Navigation("PharmacyMedications");

                    b.Navigation("PrescribeMadications");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Order", b =>
                {
                    b.Navigation("ConsumableOrders");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Patient", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Discharges");

                    b.Navigation("DoctorAssignments");

                    b.Navigation("Instructions");

                    b.Navigation("MedicalHistories");

                    b.Navigation("Movements");

                    b.Navigation("PatientAllergies");

                    b.Navigation("PatientMedicationScripts");

                    b.Navigation("Prescriptions");

                    b.Navigation("Treatments");

                    b.Navigation("VisitSchedules");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Pharmacy", b =>
                {
                    b.Navigation("PharmacyMedications");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Prescription", b =>
                {
                    b.Navigation("Prescribed_Medication");

                    b.Navigation("PrescriptionForwarding");

                    b.Navigation("PrescriptionRejection");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.StockTake", b =>
                {
                    b.Navigation("StockTakes");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Supplier", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SupplierItems");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.TreatVisit", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("Treatments");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.VisitSchedule", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("PatientMedicationScripts");

                    b.Navigation("Treatments");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("ONT_3rdyear_Project.Models.Ward", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("Beds");

                    b.Navigation("Consumables");

                    b.Navigation("WardConsumables");
                });
#pragma warning restore 612, 618
        }
    }
}
